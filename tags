!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/tjoyeux/clone/minishell/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
add_token	token.c	/^t_token	*add_token(t_token *stack, t_token *new)$/;"	f	typeref:typename:t_token *
is_operator	token.c	/^int	is_operator(char c)$/;"	f	typeref:typename:int
is_wspace	token.c	/^int	is_wspace(char c)$/;"	f	typeref:typename:int
kill_stack	token.c	/^void	kill_stack(t_token **stack)$/;"	f	typeref:typename:void
new_token	token.c	/^t_token	*new_token(char *str, int len)$/;"	f	typeref:typename:t_token *
next_token	token.c	/^char	*next_token(char *str, t_token **new, int *error_code)$/;"	f	typeref:typename:char *
put_type_in_stack	token.c	/^void	put_type_in_stack(t_token *stack, int *error_code)$/;"	f	typeref:typename:void
tokenise	token.c	/^int	tokenise(char *str, t_token **stack)$/;"	f	typeref:typename:int
